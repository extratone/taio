{
  "actions" : [
    {
      "type" : "@comment",
      "parameters" : {
        "text" : {
          "value" : "Extract checklists and provide a visual way to manage them."
        }
      }
    },
    {
      "type" : "@editor.get-text",
      "parameters" : {
        "location" : 0,
        "fallback" : 0,
        "filename" : {
          "value" : "$",
          "tokens" : [
            {
              "location" : 0,
              "value" : "@editor.file-name"
            }
          ]
        }
      }
    },
    {
      "type" : "@flow.javascript",
      "parameters" : {
        "script" : {
          "value" : "const inputValue = $actions.inputValue;\nconst regex = \/^(- +\\[([ xX])\\] +(.+))\/;\nconst lines = inputValue.split(\"\\n\");\nconst listData = [];\nlet currentItems = [];\nlet currentIndex = 0;\nlet characterIndex = 0;\n\nconst saveGroup = () => {\n  if (currentItems.length > 0) {\n    listData.push({\n      start: currentIndex,\n      end: characterIndex - 1,\n      items: currentItems\n    });\n    currentItems = [];\n  }\n}\n\nlines.forEach(line => {\n  const matches = line.match(regex);\n  if (matches == null) {\n    saveGroup();\n  } else {\n    if (currentItems.length == 0) {\n      currentIndex = characterIndex;\n    }\n    currentItems.push({\n      checked: matches[2] !== \" \",\n      text: matches[3]\n    });\n  }\n  characterIndex += line.length + 1;\n});\n\nsaveGroup();\n\n$ui.render({\n  props: {\n    title: \"Checklists\",\n    navButtons: [\n      {\n        title: \"Done\",\n        handler: () => commitChanges()\n      }\n    ]\n  },\n  views: [\n    {\n      type: \"text\",\n      props: {\n        editable: false,\n        text: \"No checklist is found, example:\\n\\n- [ ] Unselected\\n- [x] Selected\"\n      },\n      layout: $layout.fill\n    },\n    {\n      type: \"list\",\n      props: {\n        id: \"list\",\n        style: 1,\n        reorder: true,\n        crossSections: false,\n        header: {\n          type: \"label\",\n          props: {\n            height: 32,\n            text: \"Tap, swipe, and long press\",\n            align: $align.center,\n            font: $font(13)\n          }\n        },\n        template: [\n          {\n            type: \"image\",\n            props: {\n              id: \"icon\"\n            },\n            layout: (make, view) => {\n              make.centerY.equalTo(view.super);\n              make.left.inset(15);\n              make.size.equalTo($size(24, 24));\n            }\n          },\n          {\n            type: \"label\",\n            props: {\n              id: \"label\"\n            },\n            layout: (make, view) => {\n              make.centerY.equalTo(view.super);\n              make.left.inset(50);\n              make.right.inset(15);\n            }\n          }\n        ],\n        actions: [\n          {\n            title: \"delete\",\n            handler: (_, indexPath) => {\n              const section = listData[indexPath.section];\n              section.items.splice(indexPath.row, 1);\n              $delay(0.3, reloadData);\n            }\n          }\n        ]\n      },\n      layout: $layout.fill,\n      events: {\n        didSelect: (_, indexPath) => {\n          $device.taptic();\n          const section = listData[indexPath.section];\n          const item = section.items[indexPath.row];\n          item.checked = !item.checked;\n          $delay(0.3, reloadData);\n        },\n        reorderMoved: (from, to) => {\n          const items = listData[from.section].items;\n          moveItem(items, from.row, to.row);\n        },\n        reorderFinished: reloadData\n      }\n    }\n  ]\n});\n\nreloadData();\n\nfunction reloadData() {\n  const list = $(\"list\");\n  list.hidden = listData.length == 0;\n  list.data = listData.map(group => {\n    return {\n      rows: group.items.map(item => {\n        return {\n          label: {\n            text: item.text\n          },\n          icon: {\n            symbol: item.checked ? \"checkmark.square.fill\" : \"square\"\n          }\n        };\n      })\n    };\n  });\n}\n\nfunction commitChanges() {\n  const reversed = listData.slice().reverse();\n  let result = inputValue;\n\n  reversed.forEach(group => {\n    const items = group.items.map(item => {\n      return `- [${item.checked ? \"x\" : \" \"}] ${item.text}`;\n    });\n    const newText = items.join(\"\\n\");\n    result = replaceRange(result, group.start, group.end, newText);\n  });\n\n  $actions.resolve(result);\n  $app.close();\n}\n\nfunction moveItem(array, from, to) {\n  if (to >= array.length) {\n    var k = to - array.length + 1;\n    while (k--) {\n      array.push(undefined);\n    }\n  }\n  array.splice(to, 0, array.splice(from, 1)[0]);\n}\n\nfunction replaceRange(string, start, end, substitute) {\n  return string.substring(0, start) + substitute + string.substring(end);\n}"
        }
      }
    },
    {
      "type" : "@editor.set-text",
      "parameters" : {
        "createIfNotExists" : true,
        "location" : 0,
        "filename" : {
          "value" : "$",
          "tokens" : [
            {
              "location" : 0,
              "value" : "@editor.file-name"
            }
          ]
        },
        "text" : {
          "value" : "$",
          "tokens" : [
            {
              "location" : 0,
              "value" : "@input"
            }
          ]
        }
      }
    }
  ],
  "buildVersion" : 1,
  "name" : "Checklists",
  "clientMinVersion" : 1,
  "summary" : "",
  "icon" : {
    "glyph" : "list.bullet",
    "color" : "#FFB000"
  },
  "clientVersion" : 2
}