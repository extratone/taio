{
  "actions" : [
    {
      "type" : "@flow.javascript",
      "parameters" : {
        "script" : {
          "value" : "const instructions = `## Instructions\n\n- Select a downloaded \\`*.ttf\\` font\n- Allow Safari to download a profile\n- Install the profile by going system settings\n- Select the installed font in Taio's editor settings\n\n## Tips\n\nInstalled fonts are also available to other apps that support system-wide fonts. Whenever you want to remove a font, just remove the profile.\n\nTap \\`Install Font\\` to get started.\n\n## Note\n\nThis action works for iOS only, fonts can be installed by double clicking the file on macOS.`;\n\n$ui.render({\n  props: {\n    title: \"Install Font\",\n    bgcolor: $color(\"#FFFFFF\", \"#0F0F0F\")\n  },\n  views: [\n    {\n      type: \"button\",\n      props: {\n        id: \"install-button\",\n        title: \"Install Font\",\n        font: $font(\"medium\", 17),\n        titleColor: $color(\"white\"),\n        bgcolor: $color(\"#007aff\", \"#0a84ff\"),\n        cornerRadius: 10,\n        smoothCorners: true\n      },\n      layout: (make, view) => {\n        make.leading.equalTo(view.super.safeAreaLeading).inset(40);\n        make.trailing.equalTo(view.super.safeAreaTrailing).inset(40);\n        make.bottom.equalTo(view.super.safeAreaBottom).inset(15);\n        make.height.equalTo(44);\n      },\n      events: {\n        tapped: async() => {\n          const data = await $drive.open();\n          if (data) {\n            install(data);\n          } else {\n            $actions.resolve();\n          }\n        }\n      }\n    },\n    {\n      type: \"markdown\",\n      props: {\n        content: instructions\n      },\n      layout: (make, view) => {\n        make.left.top.right.equalTo(0);\n        make.bottom.equalTo($(\"install-button\").top).offset(-15);\n      }\n    }\n  ]\n});\n\nfunction install(data) {\n  const name = data.fileName;\n  const type = name.split(\".\").pop().toLowerCase();\n  if (type !== \"ttf\" && type !== \"otf\") {\n    alert(\"Please select ttf or otf fonts.\");\n    return;\n  }\n\n  const title = name.replace(\/\\.[^\/.]+$\/, \"\");\n  const uuid = uuidv4();\n  startServer(`\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n    <key>PayloadContent<\/key>\n    <array>\n      <dict>\n        <key>Font<\/key>\n        <data>${$text.base64Encode(data)}<\/data>\n        <key>PayloadIdentifier<\/key>\n        <string>app.taio.font.${uuid}<\/string>\n        <key>PayloadOrganization<\/key>\n        <string>https:\/\/taio.app<\/string>\n        <key>PayloadType<\/key>\n        <string>com.apple.font<\/string>\n        <key>PayloadUUID<\/key>\n        <string>${uuid}<\/string>\n        <key>PayloadVersion<\/key>\n        <integer>1<\/integer>\n      <\/dict>\n    <\/array>\n    <key>PayloadDescription<\/key>\n    <string>${title}<\/string>\n    <key>PayloadDisplayName<\/key>\n    <string>${title}<\/string>\n    <key>PayloadIdentifier<\/key>\n    <string>app.taio.font.${uuid}<\/string>\n    <key>PayloadOrganization<\/key>\n    <string>https:\/\/taio.app<\/string>\n    <key>PayloadRemovalDisallowed<\/key>\n    <false\/>\n    <key>PayloadType<\/key>\n    <string>Configuration<\/string>\n    <key>PayloadUUID<\/key>\n    <string>${uuid}<\/string>\n    <key>PayloadVersion<\/key>\n    <integer>1<\/integer>\n  <\/dict>\n  <\/plist>`);\n}\n\nfunction startServer(plist) {\n  const port = 4399;\n  const server = $server.new();\n  server.listen({\n    didStart: () => {\n      $app.openURL(`http:\/\/localhost:${port}`);\n      $delay(3, () => server.stop());\n    }\n  });\n\n  server.addHandler({\n    response: () => {\n      return {\n        type: \"data\",\n        props: {\n          contentType: \"application\/x-apple-aspen-config\",\n          text: plist\n        }\n      }\n    }\n  });\n\n  server.start({ port });\n  $actions.resolve();\n}\n\nfunction uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\/[xy]\/g, c => {\n    const r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16).toUpperCase();\n  });\n}"
        }
      }
    }
  ],
  "buildVersion" : 1,
  "name" : "Install Font",
  "clientMinVersion" : 1,
  "summary" : "",
  "icon" : {
    "glyph" : "textformat",
    "color" : "#3FA1F8"
  },
  "clientVersion" : 2
}